/*
*
*  Copyright 2011 by the CALATK development team
*
*   Licensed under the Apache License, Version 2.0 (the "License");
*   you may not use this file except in compliance with the License.
*   You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
*   Unless required by applicable law or agreed to in writing, software
*   distributed under the License is distributed on an "AS IS" BASIS,
*   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*   See the License for the specific language governing permissions and
*   limitations under the License.
*
*
*/

#include "CApplication.h"

namespace CALATK
{

CApplication::CApplication():
  m_GivenDataJSONConfigurationAutogeneratedFromSourceAndTargetImageFiles( false )
{
}


CApplication::CApplication( const int argc, char **argv ):
  m_GivenDataJSONConfigurationAutogeneratedFromSourceAndTargetImageFiles( false )
{
  if( argc < 3 )
    {
    std::string usage = "Usage: CALATKCommandLine "
          "<algorithm_parameters_config.json> "
          "(<data_parameters_config.json> | <source_image_file> <target_image_file>) "
          "[<used_algorithm_parameters_config.json>] "
          "[<used_data_parameters_config.json>]\n";
    throw std::runtime_error( usage.c_str() );
    }

  this->SetGivenAlgorithmConfigurationFile( argv[1] );
  const std::string argv2( argv[2] );
  if( argv2.length() > 5 && std::string( ".json" ).compare( argv2.substr( argv2.length() - 5 )))
    {
    if( argc < 4 )
      {
      throw std::runtime_error( "Insufficient number of arguments, must supply both source and target image." );
      }
    this->SetGivenSourceAndTargetImageFiles( argv[2], argv[3] );

    if( argc > 4 )
      {
      this->SetUsedAlgorithmConfigurationFile( argv[4] );
      }

    if( argc > 5 )
      {
      this->SetUsedDataConfigurationFile( argv[5] );
      }
    }
  else
    {
    this->SetGivenDataConfigurationFile( argv2 );

    if( argc > 3 )
      {
      this->SetUsedAlgorithmConfigurationFile( argv[3] );
      }

    if( argc > 4 )
      {
      this->SetUsedDataConfigurationFile( argv[4] );
      }
    }
}


void CApplication::SetGivenAlgorithmConfigurationFile( const std::string & file )
{
  this->m_GivenAlgorithmConfigurationFile = file;
  this->m_GivenAlgorithmJSONConfiguration.ReadJSONFile( file );
}


std::string CApplication::GetGivenAlgorithmConfigurationFile() const
{
  return this->m_GivenAlgorithmConfigurationFile;
}


void CApplication::SetGivenSourceAndTargetImageFiles( const std::string & source, const std::string & target )
{
  // The source image goes into Timepoint 0.0.
  Json::Value sourceFile( source );
  Json::Value sourceIntensityImage;
  sourceIntensityImage["File"] = sourceFile;
  Json::Value sourceImages;
  sourceImages["Intensity"] = sourceIntensityImage;
  Json::Value sourceTimepoint;
  sourceTimepoint["Time"] = 0.0;
  sourceTimepoint["Images"] = sourceImages;

  // The target image goes into Timepoint 1.0.
  Json::Value targetFile( target );
  Json::Value targetIntensityImage;
  targetIntensityImage["File"] = targetFile;
  Json::Value targetImages;
  targetImages["Intensity"] = targetIntensityImage;
  Json::Value targetTimepoint;
  targetTimepoint["Time"] = 1.0;
  targetTimepoint["Images"] = targetImages;

  Json::Value timePoints;
  timePoints[0] = sourceTimepoint;
  timePoints[1] = targetTimepoint;

  // Arbitrarily say there is a single subject with an Id of "1".
  Json::Value subjectID("1");

  Json::Value subject;
  subject["ID"] = subjectID;
  subject["Timepoints"] = timePoints;

  Json::Value subjects;
  subjects[0] = subject;

  this->m_GivenDataJSONConfiguration.InitializeEmptyRoot();
  Json::Value & root = *m_GivenDataJSONConfiguration.GetRootPointer();

  root["Subjects"] = subjects;
  this->m_GivenDataJSONConfigurationAutogeneratedFromSourceAndTargetImageFiles = true;
}


void CApplication::SetGivenDataConfigurationFile( const std::string & file )
{
  this->m_GivenDataConfigurationFile = file;
  this->m_GivenDataJSONConfiguration.ReadJSONFile( file );
}


std::string CApplication::GetGivenDataConfigurationFile() const
{
  return this->m_GivenDataConfigurationFile;
}


void CApplication::SetUsedAlgorithmConfigurationFile( const std::string & file )
{
  this->m_UsedAlgorithmConfigurationFile = file;
}


std::string CApplication::GetUsedAlgorithmConfigurationFile() const
{
  return this->m_UsedAlgorithmConfigurationFile;
}


void CApplication::SetUsedDataConfigurationFile( const std::string & file )
{
  this->m_UsedDataConfigurationFile = file;
}


std::string CApplication::GetUsedDataConfigurationFile() const
{
  return this->m_UsedDataConfigurationFile;
}


void CApplication::Solve()
{
  if( this->m_UsedAlgorithmConfigurationFile.length() > 0 )
    {
    // TODO: replace with used configuration.
    this->m_GivenAlgorithmJSONConfiguration.WriteCurrentConfigurationToJSONFile( this->m_UsedAlgorithmConfigurationFile );
    }

  if( this->m_UsedDataConfigurationFile.length() > 0 )
    {
    // TODO: replace with used configuration.
    this->m_GivenDataJSONConfiguration.WriteCurrentConfigurationToJSONFile( this->m_UsedDataConfigurationFile );
    }
}

} // end namespace CALATK
